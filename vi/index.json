[{"uri":"/workshop-01/vi/1-introduce/","title":"Giới thiệu","tags":[],"description":"","content":"\nCloud Computing hiện tại đang dần trở thành xu thế của thế giới. Rất nhiều công ty đang dần xây dựng, đưa cơ sở hạ tầng cùa mình lên cloud vì tính chất: nhanh chóng, sự đàn hồi, tiết kiệm chi phí, triển khai toàn cầu trong vòng vài phút.\nVà vì thế trong phần hướng dẫn này, mình sẽ hướng dẫn các bạn thực hiện triển khai quá trình phát triển ứng dụng react application của mình ngay trên cloud AWS nhờ công cụ Cloud9 IDE.\nTiếp đó là thực hiện tạo CI/CD cho dự án của chúng ta qua bộ công cụ Codepipeline. Và cuối cùng là phân phối nội dung website đến toàn cầu thông qua Cloudfront và quản lí tên miền của riêng ta thông qua Route 53.\n"},{"uri":"/workshop-01/vi/","title":"Phát triển và triển khai static website lên AWS Cloud","tags":[],"description":"","content":"Tổng quan Workshop này sẽ hướng dẫn bạn phát triển và triển khai tự động một trang web tĩnh trên AWS cloud với các dịch vụ Cloud9, S3, Codepiple, Cloudfront, Route53,..\nCùng xem diagram dưới đây để hình dung ra bức tranh toàn cảnh của workshop này.\nNội dung 1. Giới thiệu 2. Chuẩn bị 3. Tạo môi trường phát triển 4. Triển khai CI/CD pipeline 5. Public webite 6. Vô hiệu hoá Cache 7. Dọn dẹp tài nguyên "},{"uri":"/workshop-01/vi/3-developmentenvironment/3.1-createcloud9/","title":"Tạo Cloud9","tags":[],"description":"","content":" Tại trang chủ của dịch vụ Clou9 ta click Create environment Ở phần Details Điền Name ta nhập react-app-workshop Environment type ta chọn New EC2 instance Ở phần New EC2 instance Ta chọn loại instance t3.small Với Platform ta chọn Amazon linux 2 Timeout ta để mặc định 30\u0026rsquo; khi không truy cập sẽ hibernate Phần network Phần Network settings với Connection ta chọn AWS Systems Manager (SSM) VPC Setting ta chọn workshop-01-vpc và private subnet Click Create Cloud9 Kiểm tra tạo thành công hay không Sau một khoảng thời gian tầm 10 - 30 phút ta đã tạo thành công Cloud9 Truy cập vào Cloud9 Ta click vào Open Cloud9 IDE và truy cập vào giao diện của nó ta thấy bố cục cũng tương tự với các phần mềm IDE khác trên thị trường. Ta sẽ thực hiện ping 8.8.8.8 xem có thông internet không. Thì ta thấy tất cả các gói gửi đi đều bị loss. Điều này chứng tỏ môi trường phát triển của chúng ta không thể đi ra ngoài internet.\nNhư mình đã nói ở trên chúng ta sẽ không thể cài đặt các depedencies cần thiết cho dự án của chúng ta được nên bước tiếp theo ta cần phải làm nó thông ra internet thông qua việc tạo NAT gateway.\n"},{"uri":"/workshop-01/vi/4-createcicd/4.1-createcodepipeline/","title":"Tạo CodePipeline","tags":[],"description":"","content":" Truy cập vào AWS CodePipeline Chọn Pipeline Chọn Create pipeline Trong giao diện tạo CodePipeline Nhập react-deploy-pipeline vào Pipeline name Pipeline type trong bài lab này ta chọn V1 là đủ Với Excution mode ta chọn Superseded Superseded (Bị thay thế) được hiểu là khi một thực thi mới được kích hoạt (chẳng hạn khi bạn đưa ra một thay đổi vào mã nguồn), nó sẽ được bắt đầu và thực hiện các bước trong quy trình triển khai. Trong quá trình này, nếu có một thực thi khác đang chạy cùng lúc, quy trình triển khai có thể tự động dừng và thay thế thực thi cũ hơn bằng thực thi mới hơn.\nĐối với Service role chọn New service role Và tích chọn Allow AWS CodePipeline to create a service role so it can be used with this new pipeline Ở Advance Setting ta chọn Artifact store là Default location để lưu trữ artifact trong cùng một region với CodePipeline Về việc mã hoá oject khi lưu trữ trên S3 ta chọn sử dụng Default AWS Managed Key làm Encryption key Chọn Next Đối với Add source stage Source provider, chọn AWS CodeCommit Repository name, chọn workshop-01-react Đối với Branch name, chọn master Tích chọn sử dụng Amazon CloudWatch Events để tự động bắt đầu pipeline có thay đổi trên repo. Phần Output artifact format ta chọn CodePipeline default. Artifact của ta sẽ là source code được clone về đóng zip lại nhưng sẽ không chứa các metadata của git. Chọn Next Phần Build provider chọn AWS CodeBuild Phần Region sẽ trùng region với dự án của chúng ta N.Virginia Phần Project Name vì ta chưa tạo Codebuild project nên ta chọn Create project Một tab mới hiện ra cho chúng ta cấu hình CodeBuild project\nTa nhập workshop-01-react vào mục Project Name Về phần cấu hình môi trường(EC2) để CodeBuild thực hiện build project của chúng ta hãy chọn như hình dưới đây: Tiếp tục chọn New service role Ở phần BuildSpec, trong khuôn khổ của bài lab này ta sẽ thực hiện thêm cấu hình trực tiếp vào phần Build Commands. Còn thực tế họ sẽ thêm một file buildspec.yml vào root repo của dự án. Điều này giúp cho developer có thể dễ dàng chỉnh sửa quá trình build mà không cần phải truy cập vào console CodeBuild của aws. Mà chưa chắc họ đã có quyền truy cập được.\nCầu hình được thêm vào như sau:\nversion: 0.2 phases: install: runtime-versions: nodejs: 18 commands: # install npm - npm install build: commands: # run build script - npm run build artifacts: # include all files required to run the application files: - \u0026#39;**/*\u0026#39; base-directory: build Nhìn sơ qua thì cấu hình trên miêu tả quá trình ta build source code của chúng ta trên môi trường được cài nodejs version 18, thực hiện các lệnh shell và đẩy ra artifact là những gì có trong thư mục build.\nVề syntax và ví dụ về cấu hình buildspec bạn có thể tham khảo thêm tại đây.\nVề log ta chọn Cloudwatch log để xem log quá trình build của CodeBuild. Chọn Continue to CodePipeline Sau khi quay lại giao diện tạo profile của CodePipeline ta thấy phần project name đã được tự động thêm vào Codebuild project mà ta vừa mới tạo và thông báo tạo Codebuild project thành công. Về Build type ta chọn Trigger single build điều này có nghĩa là mỗi lần bạn kích hoạt một build, CodeBuild sẽ tạo ra một container build riêng biệt để xây dựng mã nguồn của bạn.\nKhông như batch build, CodeBuild sẽ tập hợp nhiều phiên bản của mã nguồn và xây dựng chúng trong cùng một container build. Và trong bài lab này ta đương nhiên là không cần dùng batch build để làm gì cả.\nĐối với Deploy stage Ta chọn deploy lên S3 Region của S3 là ở N.Virginia Bucket ta chọn workshop-01-react ta tạo ở bước 2.4 Tích chọn Extract file before deploy để giải nén các tệp ra bucket của chúng ta. Chọn Next Bước tiếp theo sẽ là review lại quá trình mình tạo profile cho CodePipeline Tạo thành công CodePipeline Sau khi tạo CodePipeline nó sẽ thực hiện chạy piple lần đầu tiên Sau khi đợi một lúc thì ta thấy pipeline đã chạy success.\n"},{"uri":"/workshop-01/vi/5-publicwebsitedistribution/5.1-createhostedzone/","title":"Tạo hosted zone","tags":[],"description":"","content":"Ở đây vì mình đang sở hữu domain name có tên là bibichannel.site ở domain registrar khác nên ở Route 53 mình sẽ tạo một hosted zone để quản lí tên miền con của mình.\nVà tên miền con này sẽ được mình dùng để phân giải ra địa chỉ url resource của thằng Cloudfront ditribution.\nTruy cập vào Console Route 53 ta chọn Hosted zones sau đó click Create hosted zone Ở Domain name, nhập workshop-01.bibichannel.site để tạo child domain cho bibichannel.site Descriptions nhập The hosted zone used for workshop-01.bibichannel.site domain Type ta sẽ chọn là Public hosted zone Sau khi tạo xong ta sẽ thấy 2 record NS và SOA được tạo ra. Record NS(Name Server) sẽ chứa thông tin của name server của aws định tuyến các yêu cầu liên quan đến tên miền này. Record SOA(Start of Authority) trong AWS Route 53 là một bản ghi tài nguyên quan trọng trong hệ thống DNS, chứa thông tin quản lý về tên miền cụ thể. Bản ghi SOA thường được sử dụng để xác định máy chủ tên miền chính (primary name server) cho tên miền, cũng như các thông tin quản lý khác như Zone ID, địa chỉ email của administrator,\u0026hellip; Xem thêm tại đây. Tiếp theo ta cần phải tạo các record NS tại domain registrar mà ta đã đăng ký tên miền trỏ về Name server của AWS. Record NS này sẽ quyết định máy chủ nào sẽ quản lí thông tin của child domain của chúng ta. Và ở đây là AWS Route 53. "},{"uri":"/workshop-01/vi/2-prerequiste/2.1-createvpc/","title":"Tạo VPC","tags":[],"description":"","content":"Trong bước này, chúng ta sẽ cần tạo một VPC có 1 public/private subnet. VPC này sẽ được dùng để triển khai môi trường development cho React App của chúng ta thông qua Cloud9 Service.\nTổng quan kiến trúc sau khi các bạn hoàn tất bước này sẽ như sau:\nTa sẽ sử dụng tính năng VPC and more để tiến hành tạo nhanh VPC.\nTrong giao diện Create VPC\nChọn tính năng VPC and more Phần Name tag auto-generation ta tích chọn và tiến hành nhập: workshop-01 IPv4 CIDR block, nhập 10.10.0.0/16 Ở phần Number of Availability Zones (AZs) ta chọn 1 Tiếp đó Number of public subnets và Number of private subnets ta đều chọn 1 Tiếp toggle Customize subnets CIDR blocks ta tiến hành cấu hình lại CIDR cho 2 subet: Public subnet: 10.10.1.0/24 Private subnet: 10.10.2.0/24 NAT gateways ta sẽ chọn: None VPC endpoints ta cũng sẽ chọn: None Sau đó ta Create VPC Tại sao không tạo luôn NAT Gateway?. Trên diagram kiến trúc ban đầu đúng là có NAT Gateway. Nhưng mình sẽ hướng dẫn bạn tạo nó ở phần sau. Khi chúng ta biết rằng NAT sẽ có vai trò gì trong mô hình này.\nĐể tìm hiểu cách tạo VPC thủ công với public/private subnet các bạn có thể tham khảo bài lab : Làm việc với Amazon VPC\n"},{"uri":"/workshop-01/vi/6-invalidatecachecloudfront/6.1-addstagepipeline/","title":"Thêm stage vào CodePipeline ","tags":[],"description":"","content":" Truy cập vào console của CodePipeline, chọn Pipeline, click vào react-deploy-pipline, sau đó chọn Edit. Sau đó cuộn xuống dưới cùng click Add stage. Nhập tên cho stage InvalidateCloudfront. Sau đó click Add stage. Chọn Add action group, Tiếp theo ta đặt tên là Invalidation. Action provider ta chọn là CodeBuild. Ta sẽ sử dụng CodeBuild để chạy một câu lệnh gọi api của cloudfront yêu cầu nó invalidation. Phần region ta chọn trùng với region của CodePipeline. Input artifact ta sẽ chọn SourceArtif Nhấn Create project Giao diện Create build project hiện ra. Ta đặt tên cho project là workshop-01-invalidation. Service role ta sẽ chọn New service. Với service này bạn sẽ build thất bại lần đầu tiên, vì nó không có quyền truy cập Cloudfront để tạo Invalidate. Vì vậy bạn hãy đính kèm thêm policy CloudFrontFullAccess. Tiếp theo tới phần buildspec, ta sẽ thêm cấu hình trực tiếp như sau: version: 0.2 phases: build: commands: # Invalidate - aws cloudfront create-invalidation --distribution-id E350YLUNXCX5JQ --paths \u0026#34;/*\u0026#34; Với E350YLUNXCX5JQ là distribution id của Could ta tạo ở bước 5.3\nCác phần cấu hình còn lại ta giữ như mặc định. Sau đó ta nhấn Continue to Codepipeline Quay trở lại giao diện Edit action, ta thấy thông báo project của chúng ta đã tạo thành công. Chọn single build và nhấn Create Action Action đã được tạo, ta cuộn chuột lên trên và click Save. "},{"uri":"/workshop-01/vi/2-prerequiste/","title":"Chuẩn bị","tags":[],"description":"","content":"Trong phần này các bạn sẽ cần tạo các dịch vụ cơ bản trước khi tiến hành tạo môi trường phát triển cho React app. Bao gồm các dịch vụ như: VPC, Subnet, Security group, Interface Enpoint, S3 và CodeCommit.\nNội dung Tạo VPC Tạo Security Group Tạo Interface Enpoint Tạo S3 bucket Tạo CodeCommit "},{"uri":"/workshop-01/vi/4-createcicd/4.2-checkresult/","title":"Kiểm tra kết quả","tags":[],"description":"","content":"Sau khi chạy 1 pipeline từ CodePipeline mà ta vừa mới tạo. Tiếp sau đây ta sẽ kiểm tra kết quả trả về.\nKiểm tra bucket Ta truy cập vào console của S3 Ở đây ta thấy ngoài bucket mà ta đã tạo ở bước 2.4 Thì CodePipeline sẽ tạo ra thêm 1 bucket nữa để nó lưu trữ artifact trong quá trình pipeline Truy cập workshop-01-react bucket. Ta thấy tất cả các file ta cần trong tệp build của dự án đã có trong bucket này. Tới bước này bạn hoàn toàn có thể public nội dung này lên internet từ S3 và người dùng có thể truy cập website của bạn. Nhưng sẽ tôt hơn nếu bạn sử dụng thêm dịch vụ CDN và route53 để tăng tốc website của bạn, sử dụng tên miền của chính bạn và tăng cường bảo mật.\nTruy cập bucket còn lại ta thấy 2 folder được tạo là BuildArtif và SourceArtif trong này sẽ chứa các artifact(.Zip) của source stage và build stage trong pipepline. Kiểm tra CodeBuild Truy cập vào Build project ta thấy. Có 1 build đã thành công với build number là 1, Submitter là codepipeline Phase của code build đều success Để hiểu hơn về các phase trong một code build, bạn có thể tham khảo thêm tại đây. Kiểm tra CloudWatch Truy cập vào console của CloudWatch, click vào Log groups ta thấy log group của dịch vụ CodeBuild. Mỗi log group sẽ chứa tập hợp các log streams, mỗi log streams nó chính là lưu thông tin của một quá trình build của project. Nhấn vào log stream để xem chi tiết. Đây chính là thông tin của một quá trình build từ download source cho đến lúc push artifact. "},{"uri":"/workshop-01/vi/5-publicwebsitedistribution/5.2-createacm/","title":"Tạo ACM","tags":[],"description":"","content":"Sử dụng AWS Certification Manager (ACM) để cung cấp, quản lý và triển khai các chứng chỉ SSL/TLS công khai và riêng tư để sử dụng với các dịch vụ AWS và tài nguyên. ACM loại bỏ quy trình mua, tải lên và gia hạn chứng chỉ SSL/TLS thủ công tốn nhiều thời gian.\nTruy cập console của ACM, chọn Request certificate và click Next. Ta cần yêu cầu chứng chỉ cho child domain workshop-01.bibichannel.site, nên ta điền vào phần Fully qualified domain name. Về Validation method ta nên sử dụng DNS validation để quá trình thẩm định nhanh hơn. Còn lại ta để mặc định. Chọn Create và ta đã tạo xong ACM, nhưng nó sẽ hiện status là Pending validation. Điều cần làm tiếp theo là ta cần tạo một record để quá trình thẩm định diễn ra thành công. Và vì các dịch vụ các dịch vụ AWS liên kết khá là khăng khít với nhau nên ta chỉ cần click vào Create record in route 53. Giao diện tạo record hiện ra, nó sẽ tạo ra một CNAME record để tiến hành validation cho domain của chúng ta. Click vào Create records Tạo record thành công. Sau khi tạo xong record thì ACM cũng đã thẩm định thành công domain của chúng ta và giờ domain của chúng ta đã có chứng chỉ ssl/tls. Bạn có thể truy cập https://workshop-01.bibichannel.site để xem chứng chỉ. "},{"uri":"/workshop-01/vi/6-invalidatecachecloudfront/6.2-createcommit/","title":"Tạo commit","tags":[],"description":"","content":"Ta sẽ thực hiện chỉnh sửa code của dự án, commit lên CodeCommit để pipeline của chúng ta chạy tự động sau đó nó sẽ deploy lên S3 bucket và tự động thực hiện Invalidation Cloudfront để cập nhật nội dung code mới nhất.\nChỉnh sửa source code. Để cho nhanh mình sẽ edit thẳng trên console của CodeCommit. Thực tế sẽ không như vậy, hãy sử dụng Cloud9 để phát triển dự án của chúng ta Chỉnh như hình dưới đây và commit nó. Quay lại CodeCommit ta thấy nó đã nhận thấy thay đổi trên source code của chúng ta và pipeline của chúng ta đã được kích hoạt. Sau khi đợi một khoảng thời gian pipeline của chúng ta đã chạy thành công. Chọn view detail ở action InvalidateCloudfront ta thấy thông tin lệnh call API của ta đã thành công và Invalidation đã được tạo. Mở console của Cloudfront ta truy cập vào Distributions và chọn Invalidations ta thấy thông tin của Invalidation được tạo ra. Tiếp theo ta truy cập https://workshop-01.bibichannel.site để kiểm tra sự thay đổi. Before After "},{"uri":"/workshop-01/vi/3-developmentenvironment/3.2-createelasticip/","title":"Tạo Elastic IP","tags":[],"description":"","content":"Để tạo được NAT gateway ta cần phải tạo một Elastic IP public để gán vào NAT gateway.\nTruy cập EC2\nChọn Elastic IPs Chọn Allocate Elastic IP address Trong giao diện Allocate Elastic IP address\nNetwork border group chọn đúng region bạn đang thực hành. Ở đây mình chọn us-east-1 Public IPv4 address pool, chọn Amazon’s pool of IPv4 addresses Chọn Allocate Vậy là ta đã tạo thành công Elastic IP.\n"},{"uri":"/workshop-01/vi/2-prerequiste/2.2-createsg/","title":"Tạo Security Group","tags":[],"description":"","content":"Vì ta sẽ tạo Cloud9 no-ingress ec2 instance nên ta cần phải tạo Security group cho các interface enpoint của dịch vụ Session Manager. Các kết nối này sẽ được mã hoá TLS qua HTTPS nên ta cần phải tạo inbound rule cho phép mở port 443.\nTruy cập giao diện quản trị dịch vụ VPC Click Security Group. Click Create security group. Trong giao diện Create security group Tại mục Security group name, điền VPC Endpoint. Tại mục Description, điền Allow traffic to the endpoint. Tại mục VPC, click vào và chọn VPC bạn đã tạo cho bài lab này. Cấu hình inbound rule và outbound rule cho SG ta chọn như hình dưới. Với inbound rule có source là CIDR của VPC cho phép các tài nguyên nằm trong VPC có thể gửi traffic tới security group này.\nTa click Create security group "},{"uri":"/workshop-01/vi/5-publicwebsitedistribution/5.3-createcloudfront/","title":"Tạo Cloudfront","tags":[],"description":"","content":"Trong bước này, chúng ta sẽ tạo Cloudfront để phần phối nội dung website của chúng ta.\nTruy cập vào console của Cloudfront, tại Origin domain ta chọn url của workshop-01-react s3 bucket. -Đối với quyền truy cập Origin, hãy chọn Legacy access identities. Đối với Origin access identity, bạn có thể chọn từ danh sách hoặc chọn Create new OAI.\nTích chọn Yes, update the bucket policy tại phần Bucket policy. Tại Compress objects automatically khi gửi nội dung đến viewer ta chọn yes Viewer protocol policy sẽ là Redirect HTTP to HTTPS. Còn lại giữ mặc định. Cuộn xuống dưới tại WAF, trong bài lab này ta sẽ không sử dụng nó. Chọn Do not enable security protections Ta cũng sẽ không chọn phân phối nội dung của chúng ta toàn global mà chỉ giới hạn trong vài khu vực. Nên Price class chọn Use North America, Europe, Asia, Middle East, and Africa. Tại Alternate domain name (CNAME) ta nhập child domain của ta: workshop-01.bibichannel.site Custom SSL certificate chọn ACM certificate ta đã tạo ở bước 5.2. Ở Default root object ta nhập index.html. Sau đó ấn Create distribution. Cloudfront của ta đã được tạo thành công với url sau: https://d1y4dlqj807yu9.cloudfront.net. Quá trình phân phối sẽ diễn ra trong khoảng thời gian ngắn trong vòng vài phút. Ta truy cập vào thử thì thấy website đã hoạt động. Nhưng khi ta truy cập vào https://workshop-01.bibichannel.site. THì thấy website của chúng ta chưa có. Đây là do ta đã thiếu A record DNS của child domain trỏ đến url Cloudfront resources. Bước tiếp theo ta sẽ đi tạo record. "},{"uri":"/workshop-01/vi/2-prerequiste/2.3-createinterface/","title":"Tạo Interface Enpoint","tags":[],"description":"","content":"Để các dịch vụ khác thông qua session manager connect tới ec2 instace nằm trong private subnet ta phải đưa endpoint của System Manager vào trong VPC, nghĩa là sử dụng VPC interface endpoint: Vì thế trong phần hướng dẫn này chúng ta sẽ tạo 3 interface sau:\nService com.amazonaws..ssm với tên Ssm Service com.amazonaws..ec2messages với tên Ec2message Service com.amazonaws..ssmmessages với tên Ssmmessage Để tạo được VPC Endpoint chúng ta sẽ cần bật tính năng DNS hostnames trên VPC. Nhớ lại một chút lúc ban đầu chúng ta tạo VPC đã tích enable tính năng này rồi. Bạn có thể tham khảo thêm tại đây\nTruy cập đến giao diện quản trị của dịch vụ VPC click Endpoint, sau đó click Create Endpoint.\nỞ trang Create endpoint.\nỞ phần Name tag ta điền Ssm. Ở phần Service category chọn: AWS services Tiếp theo Service Name nhập: ssm sau đó chọn service name: com.amazonaws.us-east-1.ssm. Tại mục VPC, chọn workshop-01-vpc. Chọn AZ đầu tiên và chọn private subnet Kéo chuột xuống dưới.\nTại mục Security Group, chọn security group VPC Endpoint mà chúng ta đã tạo trước đó. Tại mục Policy, chọn Full access Tiếp tục tạo thêm 2 interface enpoint nữa và dưới đây là kết quả sau khi ta đã tạo xong.\n"},{"uri":"/workshop-01/vi/3-developmentenvironment/","title":"Tạo môi trường phát triển","tags":[],"description":"","content":"Trong bước này chúng ta sẽ sử dụng Cloud9 service để tiến hành triển khai React App của chúng ta.\nAWS Cloud9: là một môi trường phát triển tích hợp (IDE) cho phép bạn viết, chạy và gỡ lỗi mã của mình trên trình duyệt. Cloud9 bao gồm một trình soạn thảo mã, trình gỡ lỗi và giao diện dòng lệnh. Cloud9 được đóng gói sẵn với các công cụ cần thiết cho các ngôn ngữ lập trình phổ biến, bao gồm JavaScript, Python, PHP, v.v..\nVà nó cho phép ta tạo một Cloud9 no-ingress ec2 instance để có thể tăng tính bảo mật cho quá trình phát triển ứng dụng web. Nó bao gồm việc tạo EC2 instance trong private subnet và dùng Session Manager để tiến hành connect từ Cloud9 vào EC2 instance của ta như sơ đồ dưới đây\nVới việc tạo EC2 instance cho dịch vụ Cloud9 trong private subnet và tạo các interface enpoint cho SSM là chuẩn sách giáo khoa rồi.\nVậy ở đây ta cần thêm public subnet và NAT Gateway chi?\nĐó là vì khi bạn triển khai môi trường development thì khi cài đặt các depedencies cho dự án của bạn thì bạn vẫn cần phải trên internet về. Và trong private subnet nếu ko được liên kết với NAT gateway được đặt trong public subnet thì không thể truy cập internet được.\nBạn có thể tham khảo thêm ở đây\nTheo mô hình trên ta sẽ cùng trải qua các bước sau đây trong phần này để phát triển ứng dụng và quản lý source code của chúng ta:\nNội Dung Tạo Cloud9 Tạo ElasticIP Tạo NAT gateway Tạo Routes cho Route Table Kiểm tra kết nối internet Tạo React App Đẩy code lên CodeCommit "},{"uri":"/workshop-01/vi/3-developmentenvironment/3.3-createnatgateway/","title":"Tạo NAT gateway","tags":[],"description":"","content":"Truy cập vào VPC\nChọn NAT Gateways Create NAT gateway Trong giao diện Create NAT gateway\nTa đặt tên như sau workshop-01-ngw Subnet ta chọn public subnet Connectivity type ta chọn Public Elastic IP allocation ID chọn EIP ta vừa mới tạo Chọn Create NAT gateway Thành công tạo NAT gateway\n"},{"uri":"/workshop-01/vi/5-publicwebsitedistribution/5.4-createrecord/","title":"Tạo record","tags":[],"description":"","content":" Truy cập Route 53, phần Hosted zones, chọn workshop-01.bibichannel.site, rồi ấn tạo record. Ta chọn Record type là A và click bật Alias. Ta chọn Route traffic to Cloudfront Rồi chọn url cloudfront distribution ta đã tạo ở bước 5.3. Nhấn Create records. Quay lại đường dẫn https://workshop-01.bibichannel.site Ta thấy website của ta đã lên rồi. Quá trình này có thể tốn thời gian, bạn chịu khó đợi nhé. "},{"uri":"/workshop-01/vi/3-developmentenvironment/3.4-createroutes/","title":"Tạo routes cho private route table","tags":[],"description":"","content":"Tạo Route table - Private và stick vào các private subnet.\nTrong giao diện VPC\nChọn Route Tables Chọn private route table Trong giao diện Route table private\nTa chọn Edit routes Trong giao diện edit routes\nTa add thêm route mới với Destionation là ra internet Muốn ra internet ta sẽ target vào NAT gateway với ID là NAT gateway ta vừa mới tạo Sau đó ta save nó lại Quay lại giao diện Route table private ta thấy\nRoutes định tuyến traffic ra internet thông qua NAT gateway đã được thêm vào. "},{"uri":"/workshop-01/vi/2-prerequiste/2.4-creates3/","title":"Tạo S3 bucket","tags":[],"description":"","content":"Trong diagram ban đầu chúng ta có thêm S3 Bucket là nơi lưu trữ static website nên ta sẽ tiến hành tạo luôn vì nó khá dễ dàng.\nTrong giao diện Create bucket AWS reigon ta chọn S3 bucket tại region mà ta đang làm lab. Hiện tại mình đang làm lab tại N.Virginia (us-east-1) region. Bucket Type trong khuôn khổ bài lab ta chọn General purpose là đủ. Nhập Bucket name, phải nhập tên duy nhất, bạn có thể chọn tùy ý ở đây mình tạo bucket với tên là workshop-01-react AWS S3 có thể truy cập public và AWS S3 cung cấp cho chúng ta cách access vào bucket và object của nó bằng API REST. Về cơ bản, đường dẫn cần phải tuân thủ DNS và không thể có hai tên miền giống nhau. Vì vậy, bucket names cần phải là duy nhất để truy xuất nhóm và đối tượng bằng điểm cuối REST API.\nỞ dưới ta sẽ giữ nguyên cấu hình mặc định và click Create bucket.\nChú ý một chút ở phần Block all public access. Ta sẽ vẫn bật tính năng này vì thứ phân phối nội dung chúng ta ra public internet sẽ là CloudFront chứ không phải S3 bucket.\n"},{"uri":"/workshop-01/vi/4-createcicd/","title":"Triển khai CI/CD Pipeline","tags":[],"description":"","content":"Để triển khai CI/CD Pipeline, AWS cung cấp cho ta bộ công cụ CodePipeline để thực hiện tự động hoá giữa quá phát triển và triển khai ứng dụng của chúng ta.\nCodePipeline là dịch vụ AWS cho phép chúng ta xây dựng qui trình khiển khai ứng dụng một cách liên tục và tự động. Với cách thức cấu hình đơn giản, CodePipeline có khả năng mô hình hoá trực quan các bước cần thiết để biên dịch, kiểm thử và triển khai các phiên bản cập nhật cho một ứng dụng hoặc dịch vụ.\nTiếp sau đây sẽ là hướng dẫn chúng ta xây dựng một CI/CD Pipeline cho ứng dụng React của chúng ta.\nNội dung Tạo CodePipeline Kiểm tra thành quả "},{"uri":"/workshop-01/vi/3-developmentenvironment/3.5-checkconnectioninternet/","title":"Kiểm tra kết nối Internet","tags":[],"description":"","content":"Sau khi ta hoàn đã đả thông internet cho EC2 trong private subnet kết nối ra ngoài internet. Ta quay lại giao diện của Cloud9 IDE tiến hành:\ncurl google.com ping 8.8.8.8 Như ta đã thấy Ec2 đã connect internet thành công.\n"},{"uri":"/workshop-01/vi/5-publicwebsitedistribution/","title":"Public website","tags":[],"description":"","content":"Ở phần hướng dẫn này chúng ta sẽ tiếp tục sử dụng Cloudfront và Route53 để public website của chúng ta ra ngoài internet.\nChúng ta cũng có thể public website trên S3 luôn mà không cần sử dụng 2 dịch vụ trên nhưng:\nAmazon S3 CloudFront Việc đưa trang web trực tiếp lên Amazon S3 là một cách đơn giản và chi phí thấp để triển khai trang web tĩnh. CloudFront cung cấp một lớp cache phía trước cho trang web, giúp cải thiện hiệu suất truy cập bằng cách giảm độ trễ và tải nội dung từ các edge location gần người dùng. Tuy nhiên, nó không hỗ trợ các tính năng như HTTP/2, TLS termination, hoặc cache phía trước. CloudFront cung cấp khả năng bảo mật cao hơn thông qua tính năng như SSL/TLS encryption, access control, và khả năng chống DDoS. Vì vậy mình nghĩ rằng chả có lí do gì mà ta không sử dụng Cloudfront để tăng tốc website, cũng như bảo mật nó tốt hơn.\nVà Route 53 sẽ giúp ta quản lí tên miền của mình, trỏ domain tới url Cloudfront distribution resource.\nNội dung Tạo Hosted zone Tạo ACM Tạo Cloudfront distribution Tạo record "},{"uri":"/workshop-01/vi/2-prerequiste/2.5-createcodecommit/","title":"Tạo CodeCommit","tags":[],"description":"","content":"Chúng ta cần một nơi có thể lưu trữ source code của chúng ta mỗi khi phát triển một ứng dụng và cùng với đó là chúng ta cần phải bảo mật source code của chúng ta.\nVới github, bitbucket, gitlab,\u0026hellip; là các repo công cộng tuy có cung cấp cho ta các gói lưu trữ source code riêng tư nhưng đòi hỏi phải trả phí và các hợp đồng rằng buộc cũng như không chắc chắn server của họ không có downtime.\nTrong khi đó aws cung cấp cho ta một dịch vụ có lưu trữ repository riêng tư là CodeCommit, nó tích hợp tốt với các dịch vụ aws khác cùng với khả năng bảo mật và quản lý quyền truy cập thông qua IAM.\nTất cả những lý do trên đều thuyết phục ta nên sử dụng CodeCommit. Và trong phần này chúng ta sẽ cùng tạo dịch vụ trên.\nĐầu tiên. chúng ta sẽ tạo một repository codecommit. Truy cập vào CodeCommit Nhập tên của dự án ta muốn lưu trữ: workshop-01-react Phần miêu tả ta điền: Repository for react application Click vào Create Việc tạo một repo trên CodeCommit khá là đơn giản và nhanh chóng. Chỉ vài bước ta đã có một repository private cho dự án của chúng ta.\n"},{"uri":"/workshop-01/vi/3-developmentenvironment/3.6-createreactapp/","title":"Tạo React Application","tags":[],"description":"","content":"Trong phần này ta sẽ thực hiện triển khai một React application đơn giản. Cloud9 hỗ trợ cho chúng ta đầy đủ thư viện cần thiết để thực hiện điều này mà ko cần cài đặt thêm bất cứ thứ gì.\nChạy lần lượt các câu lệnh sau đây để tiến hành tạo project: mkdir my-react-app cd my-react-app npx create-react-app . npm start Nếu bạn muốn xem app đang running, hãy chọn Preview, và sau đó chọn Preview Running Application. "},{"uri":"/workshop-01/vi/6-invalidatecachecloudfront/","title":"Vô hiệu hoá Cache","tags":[],"description":"","content":"Vì khi ta kích hoạt pipeline mới deploy lên s3 bucket. Thì Cloudfront sẽ không biết được sự thay đổi của S3 để tự động cập nhật lại cache của cloudfront.\nVì thế ta cần phải vô hiệu hoá cache của Cloudfront để nó cập nhật lại nội dung mới. Cloudfront cung cấp cho chúng ta tính năng Invalidations. Ta có thể tạo bằng tay hoặc CLI để có thể vô hiệu hoá Cache.\nChả lẽ ta lại phải làm thủ công việc này sao? Với quy trình CI/CD thì điều này không thể chấp nhận được. Nên trong phần này mình sẽ hướng dẫn các bạn làm nó tự động.\nNội dung Thêm stage trong Codepipeline Tạo code commit để check kết quả "},{"uri":"/workshop-01/vi/3-developmentenvironment/3.7-pushcode/","title":"Chuẩn bị VPC và EC2","tags":[],"description":"","content":"Tiếp theo ta sẽ thực hiện push code lên repository trên CodeCommit ta vừa tạo ở bước 2.5\nTruy cập vào CodeCommit copy url https của repo Sau đó ta thực hiện push code lên CodeCommit với các câu lệnh sau:\ngit remote add origin https://git-codecommit.us-east-1.amazonaws.com/v1/repos/workshop-01-react git add . git commit -m \u0026#34;fist push\u0026#34; git push --set-upstream origin master Truy cập vào CodeCommit ta thấy source code đã được push lên.\n"},{"uri":"/workshop-01/vi/7-cleanup/","title":"Dọn dẹp tài nguyên","tags":[],"description":"","content":"Hãy huỷ các tài nguyên lần lượt theo list dưới đây.\nXoá Cloud9 Xoá Nat gateway Giải phóng Elastic IP Xoá Interface endpoint Xoá VPC Xoá A record và CNAME record của Hosted zoned Route 53 Xoá Hosted zoned Route 53 Vô hiệu hoá Cloudfront sau đó Delete Xoá NS record của domain registrar của bạn Xoá Certificates của ACM Xoá CodePipeline Xoá CodeCommit Xoá Codebuild Empty object trong bucket và xoá S3 bucket Xoá role và policies liên quan. "},{"uri":"/workshop-01/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/workshop-01/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]